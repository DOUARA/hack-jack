// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0; // Base Address of the array is 0 
        let freeList = 2048; // The freeList begins at the heap base 
        let freeList[0] = 0; // Next 
        let freeList[1] = 14335; // freeList size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int neededSize, index;
        var Array block;
        let neededSize = size + 2;
        let index = 2048;
        while(true) {
            if(~(freeList[index + 1] < neededSize)) {
                 let block = freeList[index+1] - neededSize + 1; 
                 let block[0] = block;
                 let block[1] = size;
                 let freeList[index+1] = freeList[index+1] - neededSize;
                 return block + 2;
            } else {
                let index = freeList[index];
            }
        }
        return -1; // Memory is Full
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // We need to append this block to the freeList, We should find the last block first 
        var int index;
        let index = 2048;
        while(true) {
             if(freeList[index] = 0) { 
                 let freeList[index] = o-2;
                 let o[0] = 0;
                 return;
             }
             let index = freeList[index];
        }
        return;
        
    }    
}
